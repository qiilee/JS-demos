
1: php 的动态输出
    在一个页面可以写多个<?php  ?> <?php  ?>
    一个php 的变量在<?php 定义 ?>
     <?php 使用 ?>
    <?php if(true){  ?>
        div
     <?php } ?>

    <?php for($i=0; $i<=1000;$i++) {?>
            <div></div>
    <?php } ?>
    案例：把数组里面的数组，动态输出到table 里面去.
2：http 协议
    http 协议是w3c 指定的协议
    http 协议是用来规定浏览器与服务器进行通讯的数据格式
    http 协议的数据格式分为两部分
    客户端发送到服务器的数据格式称为请求的数据格式
            1：请求首行
            2：请求头
            3：请求空行
            4：请求体
        请求的提交方式有get，post ，他们之间有一些区别：
            get 提交跟post 提交有什么区别:
            1:get 提交 请求的提交参数都在地址栏后面，地址后面
        不安全。
            2:get 提交因为请求参数都在地址栏后面，所以对请求的收据的大小由限制
            3:get 提交没有请求体。
            4:post 提交有请求体，请求体的数据就是发送到服务器的参数
            5：post 提交相对安全
            6：post 提交对发送到服务器的参数的数据大小没有限制。
            7：post 提交有一个特殊的请求头
               Content-Type:application/x-www-form-urlencoded
             假设你发送到服务器的参数的数据有中文，会对这个中文进行编码。
             这样可以减少乱码.
    服务器给客户端响应的数据格式称为相应的 数据格式
          响应首行
          状态吗要知道，每个状态吗代表的是不同的含义
           200
           404
           500
           405
          响应头
            Content-Type:text/html;
          响应空行
          响应体
             其实就是html 内容，浏览器拿到这个内容就回去解析。

-------------------------------------------------------------------
我们要学习的技术叫做ajax
我们要搞清楚什么是ajax，我们必须先要理解两个概念
同步交互  案例
        客户端发送一个请求给服务器，服务器接收到请求，然后对请求进行处理
   处理之后给客户端一个响应，响应回来之后的页面会吧原来的页面覆盖掉。
异步交互
        客户端发送一个请求给服务器，服务器接收到请求，然后对请求进行处理
处理之后给客户端一个响应，响应回来之后的页面不会吧原来的界面覆盖掉.

我要通过js 提供的api 来发送请求。
    js 的那个api
    js 给我们提供了一个对象，这个对象叫做XMLHttpRequest 对象。
发请求，接数据

    1：我要创建一个XMLHttpRequest 对象。
    var xhr=new XMLHttpRequest() 创建对象

    2：我要发送请求，我要跟服务器建立一个连接。

    open 打开连接
            type 提交方式
            url  提交的地址
    3：我要发送数据给服务器。
    如果说是get 请求，请求的数据在地址的后面。
    send() 发送数据，这一步不能省略
    4：接收服务器的数据。
        服务端返回数据会调用一个回调函数。
        通过回调函数去接收数据.
    xhr.onreadystatechange=function(){
            if(xhr.readyState==4){ 响应完成了
                    if(xhr.status==200){ //响应成功了
                          responseText 属性接收服务端返回的数据.
                    }
            }


    }





1: php 的动态输出
    在一个页面可以写多个<?php  ?> <?php  ?>
    一个php 的变量在<?php 定义 ?>
     <?php 使用 ?>
    <?php if(true){  ?>
        div
     <?php } ?>
    <?php for($i=0; $i<=1000;$i++) {?>
            <div></div>
    <?php } ?>
    案例：把数组里面的数组，动态输出到table 里面去.
2：http 协议
    http 协议是w3c 指定的协议
    http 协议是用来规定浏览器与服务器进行通讯的数据格式
    http 协议的数据格式分为两部分
    客户端发送到服务器的数据格式称为请求的数据格式
            1：请求首行
            2：请求头
            3：请求空行
            4：请求提
        请求的提交方式有get，post ，他们之间有一些区别：
            get 提交跟post 提交有什么区别:
            1:get 提交 请求的提交参数都在地址栏后面，地址后面
        不安全。
            2:get 提交因为请求参数都在地址栏后面，所以对请求的收据的大小由限制
            3:get 提交没有请求体。
            4:post 提交有请求体，请求体的数据就是发送到服务器的参数
            5：post 提交相对安全
            6：post 提交对发送到服务器的参数的数据大小没有限制。
            7：post 提交有一个特殊的请求头
               Content-Type:application/x-www-form-urlencoded
             假设你发送到服务器的参数的数据有中文，会对这个中文进行编码。
             这样可以减少乱码.
    服务器给客户端响应的数据格式称为相应的 数据格式
          响应首行
          状态吗要知道，每个状态吗代表的是不同的含义
           200
           404
           500
           405
          响应头
            Content-Type:text/html;
          响应空行
          响应体
             其实就是html 内容，浏览器拿到这个内容就回去解析。

-------------------------------------------------------------------
我们要学习的技术叫做ajax
我们要搞清楚什么是ajax，我们必须先要理解两个概念
同步交互  案例
        客户端发送一个请求给服务器，服务器接收到请求，然后对请求进行处理
   处理之后给客户端一个响应，响应回来之后的页面会吧原来的页面覆盖掉。
异步交互
        客户端发送一个请求给服务器，服务器接收到请求，然后对请求进行处理
处理之后给客户端一个响应，响应回来之后的页面不会吧原来的界面覆盖掉.

我要通过js 提供的api 来发送请求。
    js 的那个api
    js 给我们提供了一个对象，这个对象叫做XMLHttpRequest 对象。
发请求，接数据

    1：我要创建一个XMLHttpRequest 对象。
    var xhr=new XMLHttpRequest() 创建对象

    2：我要发送请求，我要跟服务器建立一个连接。

    open 打开连接
            type 提交方式
            url  提交的地址
    3：我要发送数据给服务器。
    如果说是get 请求，请求的数据在地址的后面。
    send() 发送数据，这一步不能省略
    4：接收服务器的数据。
        服务端返回数据会调用一个回调函数。
        通过回调函数去接收数据.
    xhr.onreadystatechange=function(){
            if(xhr.readyState==4){ 响应完成了
                    if(xhr.status==200){ //响应成功了
                          responseText 属性接收服务端返回的数据.
                    }
            }


    }






